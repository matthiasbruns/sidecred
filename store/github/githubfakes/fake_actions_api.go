// Code generated by counterfeiter. DO NOT EDIT.
package githubfakes

import (
	"context"
	"sync"

	githuba "github.com/google/go-github/v45/github"
	"github.com/telia-oss/sidecred/store/github"
)

type FakeActionsAPI struct {
	CreateOrUpdateRepoSecretStub        func(context.Context, string, string, *githuba.EncryptedSecret) (*githuba.Response, error)
	createOrUpdateRepoSecretMutex       sync.RWMutex
	createOrUpdateRepoSecretArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *githuba.EncryptedSecret
	}
	createOrUpdateRepoSecretReturns struct {
		result1 *githuba.Response
		result2 error
	}
	createOrUpdateRepoSecretReturnsOnCall map[int]struct {
		result1 *githuba.Response
		result2 error
	}
	DeleteRepoSecretStub        func(context.Context, string, string, string) (*githuba.Response, error)
	deleteRepoSecretMutex       sync.RWMutex
	deleteRepoSecretArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	deleteRepoSecretReturns struct {
		result1 *githuba.Response
		result2 error
	}
	deleteRepoSecretReturnsOnCall map[int]struct {
		result1 *githuba.Response
		result2 error
	}
	GetRepoPublicKeyStub        func(context.Context, string, string) (*githuba.PublicKey, *githuba.Response, error)
	getRepoPublicKeyMutex       sync.RWMutex
	getRepoPublicKeyArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	getRepoPublicKeyReturns struct {
		result1 *githuba.PublicKey
		result2 *githuba.Response
		result3 error
	}
	getRepoPublicKeyReturnsOnCall map[int]struct {
		result1 *githuba.PublicKey
		result2 *githuba.Response
		result3 error
	}
	GetRepoSecretStub        func(context.Context, string, string, string) (*githuba.Secret, *githuba.Response, error)
	getRepoSecretMutex       sync.RWMutex
	getRepoSecretArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	getRepoSecretReturns struct {
		result1 *githuba.Secret
		result2 *githuba.Response
		result3 error
	}
	getRepoSecretReturnsOnCall map[int]struct {
		result1 *githuba.Secret
		result2 *githuba.Response
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeActionsAPI) CreateOrUpdateRepoSecret(arg1 context.Context, arg2 string, arg3 string, arg4 *githuba.EncryptedSecret) (*githuba.Response, error) {
	fake.createOrUpdateRepoSecretMutex.Lock()
	ret, specificReturn := fake.createOrUpdateRepoSecretReturnsOnCall[len(fake.createOrUpdateRepoSecretArgsForCall)]
	fake.createOrUpdateRepoSecretArgsForCall = append(fake.createOrUpdateRepoSecretArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *githuba.EncryptedSecret
	}{arg1, arg2, arg3, arg4})
	stub := fake.CreateOrUpdateRepoSecretStub
	fakeReturns := fake.createOrUpdateRepoSecretReturns
	fake.recordInvocation("CreateOrUpdateRepoSecret", []interface{}{arg1, arg2, arg3, arg4})
	fake.createOrUpdateRepoSecretMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeActionsAPI) CreateOrUpdateRepoSecretCallCount() int {
	fake.createOrUpdateRepoSecretMutex.RLock()
	defer fake.createOrUpdateRepoSecretMutex.RUnlock()
	return len(fake.createOrUpdateRepoSecretArgsForCall)
}

func (fake *FakeActionsAPI) CreateOrUpdateRepoSecretCalls(stub func(context.Context, string, string, *githuba.EncryptedSecret) (*githuba.Response, error)) {
	fake.createOrUpdateRepoSecretMutex.Lock()
	defer fake.createOrUpdateRepoSecretMutex.Unlock()
	fake.CreateOrUpdateRepoSecretStub = stub
}

func (fake *FakeActionsAPI) CreateOrUpdateRepoSecretArgsForCall(i int) (context.Context, string, string, *githuba.EncryptedSecret) {
	fake.createOrUpdateRepoSecretMutex.RLock()
	defer fake.createOrUpdateRepoSecretMutex.RUnlock()
	argsForCall := fake.createOrUpdateRepoSecretArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeActionsAPI) CreateOrUpdateRepoSecretReturns(result1 *githuba.Response, result2 error) {
	fake.createOrUpdateRepoSecretMutex.Lock()
	defer fake.createOrUpdateRepoSecretMutex.Unlock()
	fake.CreateOrUpdateRepoSecretStub = nil
	fake.createOrUpdateRepoSecretReturns = struct {
		result1 *githuba.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeActionsAPI) CreateOrUpdateRepoSecretReturnsOnCall(i int, result1 *githuba.Response, result2 error) {
	fake.createOrUpdateRepoSecretMutex.Lock()
	defer fake.createOrUpdateRepoSecretMutex.Unlock()
	fake.CreateOrUpdateRepoSecretStub = nil
	if fake.createOrUpdateRepoSecretReturnsOnCall == nil {
		fake.createOrUpdateRepoSecretReturnsOnCall = make(map[int]struct {
			result1 *githuba.Response
			result2 error
		})
	}
	fake.createOrUpdateRepoSecretReturnsOnCall[i] = struct {
		result1 *githuba.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeActionsAPI) DeleteRepoSecret(arg1 context.Context, arg2 string, arg3 string, arg4 string) (*githuba.Response, error) {
	fake.deleteRepoSecretMutex.Lock()
	ret, specificReturn := fake.deleteRepoSecretReturnsOnCall[len(fake.deleteRepoSecretArgsForCall)]
	fake.deleteRepoSecretArgsForCall = append(fake.deleteRepoSecretArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.DeleteRepoSecretStub
	fakeReturns := fake.deleteRepoSecretReturns
	fake.recordInvocation("DeleteRepoSecret", []interface{}{arg1, arg2, arg3, arg4})
	fake.deleteRepoSecretMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeActionsAPI) DeleteRepoSecretCallCount() int {
	fake.deleteRepoSecretMutex.RLock()
	defer fake.deleteRepoSecretMutex.RUnlock()
	return len(fake.deleteRepoSecretArgsForCall)
}

func (fake *FakeActionsAPI) DeleteRepoSecretCalls(stub func(context.Context, string, string, string) (*githuba.Response, error)) {
	fake.deleteRepoSecretMutex.Lock()
	defer fake.deleteRepoSecretMutex.Unlock()
	fake.DeleteRepoSecretStub = stub
}

func (fake *FakeActionsAPI) DeleteRepoSecretArgsForCall(i int) (context.Context, string, string, string) {
	fake.deleteRepoSecretMutex.RLock()
	defer fake.deleteRepoSecretMutex.RUnlock()
	argsForCall := fake.deleteRepoSecretArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeActionsAPI) DeleteRepoSecretReturns(result1 *githuba.Response, result2 error) {
	fake.deleteRepoSecretMutex.Lock()
	defer fake.deleteRepoSecretMutex.Unlock()
	fake.DeleteRepoSecretStub = nil
	fake.deleteRepoSecretReturns = struct {
		result1 *githuba.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeActionsAPI) DeleteRepoSecretReturnsOnCall(i int, result1 *githuba.Response, result2 error) {
	fake.deleteRepoSecretMutex.Lock()
	defer fake.deleteRepoSecretMutex.Unlock()
	fake.DeleteRepoSecretStub = nil
	if fake.deleteRepoSecretReturnsOnCall == nil {
		fake.deleteRepoSecretReturnsOnCall = make(map[int]struct {
			result1 *githuba.Response
			result2 error
		})
	}
	fake.deleteRepoSecretReturnsOnCall[i] = struct {
		result1 *githuba.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeActionsAPI) GetRepoPublicKey(arg1 context.Context, arg2 string, arg3 string) (*githuba.PublicKey, *githuba.Response, error) {
	fake.getRepoPublicKeyMutex.Lock()
	ret, specificReturn := fake.getRepoPublicKeyReturnsOnCall[len(fake.getRepoPublicKeyArgsForCall)]
	fake.getRepoPublicKeyArgsForCall = append(fake.getRepoPublicKeyArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.GetRepoPublicKeyStub
	fakeReturns := fake.getRepoPublicKeyReturns
	fake.recordInvocation("GetRepoPublicKey", []interface{}{arg1, arg2, arg3})
	fake.getRepoPublicKeyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeActionsAPI) GetRepoPublicKeyCallCount() int {
	fake.getRepoPublicKeyMutex.RLock()
	defer fake.getRepoPublicKeyMutex.RUnlock()
	return len(fake.getRepoPublicKeyArgsForCall)
}

func (fake *FakeActionsAPI) GetRepoPublicKeyCalls(stub func(context.Context, string, string) (*githuba.PublicKey, *githuba.Response, error)) {
	fake.getRepoPublicKeyMutex.Lock()
	defer fake.getRepoPublicKeyMutex.Unlock()
	fake.GetRepoPublicKeyStub = stub
}

func (fake *FakeActionsAPI) GetRepoPublicKeyArgsForCall(i int) (context.Context, string, string) {
	fake.getRepoPublicKeyMutex.RLock()
	defer fake.getRepoPublicKeyMutex.RUnlock()
	argsForCall := fake.getRepoPublicKeyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeActionsAPI) GetRepoPublicKeyReturns(result1 *githuba.PublicKey, result2 *githuba.Response, result3 error) {
	fake.getRepoPublicKeyMutex.Lock()
	defer fake.getRepoPublicKeyMutex.Unlock()
	fake.GetRepoPublicKeyStub = nil
	fake.getRepoPublicKeyReturns = struct {
		result1 *githuba.PublicKey
		result2 *githuba.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeActionsAPI) GetRepoPublicKeyReturnsOnCall(i int, result1 *githuba.PublicKey, result2 *githuba.Response, result3 error) {
	fake.getRepoPublicKeyMutex.Lock()
	defer fake.getRepoPublicKeyMutex.Unlock()
	fake.GetRepoPublicKeyStub = nil
	if fake.getRepoPublicKeyReturnsOnCall == nil {
		fake.getRepoPublicKeyReturnsOnCall = make(map[int]struct {
			result1 *githuba.PublicKey
			result2 *githuba.Response
			result3 error
		})
	}
	fake.getRepoPublicKeyReturnsOnCall[i] = struct {
		result1 *githuba.PublicKey
		result2 *githuba.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeActionsAPI) GetRepoSecret(arg1 context.Context, arg2 string, arg3 string, arg4 string) (*githuba.Secret, *githuba.Response, error) {
	fake.getRepoSecretMutex.Lock()
	ret, specificReturn := fake.getRepoSecretReturnsOnCall[len(fake.getRepoSecretArgsForCall)]
	fake.getRepoSecretArgsForCall = append(fake.getRepoSecretArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetRepoSecretStub
	fakeReturns := fake.getRepoSecretReturns
	fake.recordInvocation("GetRepoSecret", []interface{}{arg1, arg2, arg3, arg4})
	fake.getRepoSecretMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeActionsAPI) GetRepoSecretCallCount() int {
	fake.getRepoSecretMutex.RLock()
	defer fake.getRepoSecretMutex.RUnlock()
	return len(fake.getRepoSecretArgsForCall)
}

func (fake *FakeActionsAPI) GetRepoSecretCalls(stub func(context.Context, string, string, string) (*githuba.Secret, *githuba.Response, error)) {
	fake.getRepoSecretMutex.Lock()
	defer fake.getRepoSecretMutex.Unlock()
	fake.GetRepoSecretStub = stub
}

func (fake *FakeActionsAPI) GetRepoSecretArgsForCall(i int) (context.Context, string, string, string) {
	fake.getRepoSecretMutex.RLock()
	defer fake.getRepoSecretMutex.RUnlock()
	argsForCall := fake.getRepoSecretArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeActionsAPI) GetRepoSecretReturns(result1 *githuba.Secret, result2 *githuba.Response, result3 error) {
	fake.getRepoSecretMutex.Lock()
	defer fake.getRepoSecretMutex.Unlock()
	fake.GetRepoSecretStub = nil
	fake.getRepoSecretReturns = struct {
		result1 *githuba.Secret
		result2 *githuba.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeActionsAPI) GetRepoSecretReturnsOnCall(i int, result1 *githuba.Secret, result2 *githuba.Response, result3 error) {
	fake.getRepoSecretMutex.Lock()
	defer fake.getRepoSecretMutex.Unlock()
	fake.GetRepoSecretStub = nil
	if fake.getRepoSecretReturnsOnCall == nil {
		fake.getRepoSecretReturnsOnCall = make(map[int]struct {
			result1 *githuba.Secret
			result2 *githuba.Response
			result3 error
		})
	}
	fake.getRepoSecretReturnsOnCall[i] = struct {
		result1 *githuba.Secret
		result2 *githuba.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeActionsAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createOrUpdateRepoSecretMutex.RLock()
	defer fake.createOrUpdateRepoSecretMutex.RUnlock()
	fake.deleteRepoSecretMutex.RLock()
	defer fake.deleteRepoSecretMutex.RUnlock()
	fake.getRepoPublicKeyMutex.RLock()
	defer fake.getRepoPublicKeyMutex.RUnlock()
	fake.getRepoSecretMutex.RLock()
	defer fake.getRepoSecretMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeActionsAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ github.ActionsAPI = new(FakeActionsAPI)
